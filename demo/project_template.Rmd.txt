---
title: "MAP Project Title"
subtitle: 'Date of Request: January 1, 2018'
author:
- name: '[Omair A. Khan, MAS](omair.a.khan@vumc.org)'
- name: '[Dandan Liu, PhD](dandan.liu@vanderbilt.edu)'
date: "Created: January 3, 2018 | Last Modified: `r format(Sys.time(), '%B %d, %Y')`"
output:
  html_notebook:
    code_folding: hide
    theme: lumen
    number_sections: yes
    toc: yes
    toc_float:
      collapsed: yes
      smooth_scroll: true
---

<style type="text/css">
 #TOC{
   position:fixed;
   top:0;
   // left:0;
   right:0;
   margin: 32px 20px 20px 20px;
   z-index: 9;
   // display:none;
  }
  #toc-toggle{
    position:fixed;
    top:0;
    // left:0;
    right:0;
    margin: 5px 20px 5px 20px;
  }
  .col-md-3{
    width: 0%;
  }
  .col-md-9{
    width: 100%;
  }
  div.container-fluid.main-container{
    max-width:none;
    margin-left:0px;
    margin-right:none;
  }
  div.plot-container{
    margin-left:50px;
    margin-bottom:20px;
  }
  h1.title{
    max-width:950px;
  }
  li.tocify-item{
    text-indent:0px;
  }
  #toc-toggle{
    z-index:9;
  }
  .tocify-subheader, .tocify-item, .tocify, .list-group-item{
  font-size:12pt;
  }
</style>

<button id="toc-toggle" type="button" class="btn btn-default btn-xs code-folding-btn pull-right collapsed" onclick="toggletoc()"><span>Table of Contents (click to hide/show)</span></button>

<script>
function toggletoc(){
$("#TOC").toggle();
}
</script>

```{r setup, echo = TRUE, results = 'hide'}
# clear environment
rm(list = ls())
options(datadist = NULL)

# install and load packages
packages <- as.character(expression(
  knitr,
  rms, 
  Hmisc,
  dplyr,
  magrittr,
  plotly,
  broom,
  purrr,
  formattable,
  DT,
  qtlcharts
))

load_pkg(packages)

# set timezone
Sys.setenv(TZ = 'US/Central')

# set seed
set.seed(314159)

# Hmisc options
options(
  prType = 'html', 
  grType = 'plotly',
  digits = 4,
  contrasts = c("contr.treatment", "contr.treatment")
)

# define important directories
## base directories
box.dir  <- file.path("~", "box")
vmac.dir <- file.path(box.dir, "VMAC BIOSTAT")
func.dir <- useful.dir <- file.path(vmac.dir, "Useful Code")
## data directories
data.dir <- file.path(vmac.dir, "DATA", "MAP")
data.merged.dir <- file.path(data.dir, 'mergedData')
data.temp.dir <- file.path(data.dir, 'rawData', 'temp')
## project specific directories
proj.dir <- file.path(vmac.dir, "PROJECT NAME")
proj.code.dir <- file.path(proj.dir, 'code')
proj.data.dir <- file.path(proj.dir, 'data')
proj.graphics.dir <- file.path(proj.dir, 'graphics')

# define relevant data files
## to read: merged data
data.merged.file <- file.path(data.merged.dir, 'READ DATA FILENAME.rds')
## to write: project specific file
proj.data.file <- file.path(proj.data.dir, 'SAVE DATA FILENAME.rds')

request.date <- YYYYMMDD
update.request.date <- YYYYMMDD
```

```{r variables}
# define variables
group.var <- c(
  "enrolled.dx.factor"
)

fsrp.w.comp.var <- Cs(
  fsrp,
  sbp,
  htnrx.factor,
  diabetes.factor,
  currentsmoking.factor,
  cvd.factor,
  afib.factor,
  echo.lvh.factor,
  fsrp.age.pts
)

neuropsych.var <- Cs(
  np.moca,
  np.bnt,
  np.anim,
  np.tmta,
  np.tmta.trun,
  np.digsymb,
  np.executive.composite,
  np.tower,
  np.inhibit,
  np.fas,
  np.tmtb,
  np.tmtb.trun,
  np.hvot,
  np.memory.composite,
  np.biber.t1to5,
  np.biber.ld,
  np.biber.discrim,
  np.cvlt1to5,
  np.cvlt.ldfr,
  np.cvltrecog.discrim
)

covariates.int.var <- Cs(
  enrolled.dx.factor
)

###

descriptive.var <- Cs(
  biomarkers.nfl.plasma,
  csf.nfl,
  age,
  sex.factor,
  education,
  raceethnicity.factor,
  fsrp.minus.age.points,
  fsrp,
  sbp,
  htnrx.factor,
  diabetes.factor,
  currentsmoking.factor,
  cvd.factor,
  afib.factor,
  echo.lvh.factor,
  fsrp.age.pts,
  apoe4pos.factor,
  csf.abx40,
  csf.abx42,
  csf.tau,
  csf.ptau,
  np.moca,
  np.bnt,
  np.anim,
  np.tmta,
  np.tmta.trun,
  np.digsymb,
  np.executive.composite,
  np.tower,
  np.inhibit,
  np.fas,
  np.tmtb,
  np.tmtb.trun,
  np.hvot,
  np.memory.composite,
  np.biber.t1to5,
  np.biber.ld,
  np.biber.discrim,
  np.cvlt1to5,
  np.cvlt.ldfr,
  np.cvltrecog.discrim
)

# Model Variables
predictors.var <- Cs(
  csf.nfl
)
covariates.var <- Cs(
  age,
  sex.factor,
  raceethnicity.factor,
  education,
  fsrp.minus.age.points,
  enrolled.dx.factor,
  apoe4pos.factor
)
outcomes.var <- Cs(
  np.moca,
  np.bnt,
  np.anim,
  np.tmta.trun,
  np.digsymb,
  np.executive.composite,
  np.tower,
  np.inhibit,
  np.fas,
  np.tmtb.trun,
  np.hvot,
  np.memory.composite,
  np.biber.t1to5,
  np.biber.ld,
  np.biber.discrim,
  np.cvlt1to5,
  np.cvlt.ldfr,
  np.cvltrecog.discrim
)

###

all.var.list <- unique(c(
  "map.id",
  group.var,
  fsrp.w.comp.var,
  covariates.var,
  covariates.int.var, 
  neuropsych.var
))
```

```{r functions}
source(file.path(func.dir, 'my.outliers.R'))
source(file.path(useful.dir, "my.LatexTable.R"))
```

# Project Summary

## Metadata

- Analytical Request Date: `r cat(request.date)`
<!-- - Update Reqeust Date: `r cat(update.request.date)` -->
- Study Lead: Angela Jefferson, PhD
- Trainee: Katie Osborn, PsyD
- Biostatistician: Omair A. Khan, MAS under Dandan Liu, PhD

## Aim

Paste project aim paragraph here.

## Hypothesis Testing Parameters

- Data Subset: all data
- Predictors: `csf.nfl`
- Covariates: `age`, `sex.factor`, `raceethnicity.factor`, `education`, `fsrp.minus.age.points`, `enrolled.dx.factor`, `apoe4pos.factor`
- Outcomes: `np.moca`, `np.bnt`, `np.anim`, `np.tmta`, `np.tmta.trun`, `np.digsymb`, `np.executive.composite`, `np.tower`, `np.inhibit`, `np.fas`, `np.tmtb`, `np.tmtb.trun`, `np.hvot`, `np.memory.composite`, `np.biber.t1to5`, `np.biber.ld`, `np.biber.discrim`, `np.cvlt1to5`, `np.cvlt.ldfr`, `np.cvltrecog.discrim`

# Inclusion/Exclusion Criteria

## Inclusion criteria

- All enrolled MAP participants
- Epoch 1

**NB: The study lead did not specify which epoch(s) to include in the analysis. This report assumes that the study lead is requesting only Epoch 1.**

```{r inclusion}
# create a project specific dataset
if (!file.exists(proj.data.file) | FALSE) {
  merged.df <- readRDS(data.merged.file)

  proj.data.df <- merged.df %>%
    filter(
      epoch == "1"
    ) %>%
    select(
      one_of(c(all.var.list))
    )
  
  # label existing variables with missing labels
  label(proj.data.df$enrolled.dx.factor) <- filter(interim.list$epoch_1$metadata$main, field_name == "diagnosis")$field_label
  label(proj.data.df$fsrp.age.pts) <- "FSRP w/o pts for age (1 pt)"

  proj.data.df <- as.data.frame(proj.data.df)
  
  saveRDS(proj.data.df, file = proj.data.file)
  remove(merged.df, interim.list, proj.data.df)
}

mydat0 <- readRDS(proj.data.file)
```

## Exclusion criteria

- MAP 112 (due to dementia)
- Participants missing plasma NFL data
- Participants with invalid neuropsychological data

```{r exclusion}
exclusion.fun <- function(data) {
  # Dx: MAP 112 (due to dementia)
  excl.1    = data$enrolled.dx.factor %in% c("Dementia")
  id.excl.1 = data$map.id[excl.1]
  id.incl.1 = data$map.id[!excl.1]
  
  # CSF NFL: missing
  excl.2    = apply(as.matrix(data[data$map.id %in% id.incl.1, c("csf.nfl")]), 1, function(vec) sum(!is.na(vec)) == 0)
  id.excl.2 = id.incl.1[excl.2]
  id.incl.2 = id.incl.1[!excl.2]
  
  # Neuropsych variables: all invalid (aka all missing)
  excl.3    = apply(as.matrix(data[data$map.id %in% id.incl.2, neuropsych.var]), 1, function(vec) sum(!is.na(vec)) == 0)
  id.excl.3 = id.incl.2[excl.3]
  id.incl.3 = id.incl.2[!excl.3]
  
  # Covariates: any missing
  excl.4    = apply(as.matrix(data[data$map.id %in% id.incl.3, covariates.var.A]), 1, anyNA)
  id.excl.4 = id.incl.3[excl.4]
  id.incl.4 = id.incl.3[!excl.4]
  
  id.final = id.incl.4
  final.data = data[data$map.id %in% id.final, ]
  
  id.excl = list(id.excl.1, id.excl.2, id.excl.3, id.excl.4)
  id.incl = list(id.incl.1, id.incl.2, id.incl.3, id.incl.4)
  
  list("id.excl" = id.excl, 
       "id.incl" = id.incl)
}

excl <- exclusion.fun(mydat0)
id.excl <- excl$id.excl
id.incl <- excl$id.incl

# create analysis dataset and data distribution
mydat <- mydat0 %>%
  filter(
    map.id %in% id.incl[[length(id.incl)]]
  )

mydat.label.temp <- label(mydat)

mydat <- droplevels(mydat)

label(mydat) = lapply(names(mydat.label.temp), function(x) label(mydat[,x]) = mydat.label.temp[x])

dd <- datadist(mydat); options(datadist = 'dd')
```

We begin with n = `r dim(mydat0)[1]` subjects.

Keeping only those subjects with baseline diagnosis of Normal, Ambiguous At Risk, or MCI, we have n = `r length(id.incl[[1]])` participants. `r excl_map_id(1)`

Next, we exclude participants with missing `csf.nfl`, we have n = `r length(id.incl[[2]])` participants. `r excl_map_id(2)`

We next remove participants with invalid or missing neuropsychological data for all neuropsychological outcomes, leaving n = `r length(id.incl[[3]])` participants. `r excl_map_id(3)`

Finally, after removing participants with any missing covariate, we will perform our analyses using n = `r length(id.incl[[4]])` participants. `r excl_map_id(4)`

```{r exclusion-diagram}
exclusion.diagram <- paste0("digraph exclusionDiagram
{
  graph [layout = dot, splines = ortho, concentrate = true]
  node [fontname = Helvetica, shape = box, fillcolor = white, style = filled]

  start [label = 'Participants Enrolled in the\nVanderbilt Memory & Aging Project\nn = ", dim(mydat0)[1], "']
  final [label = 'Participants Included in Primary Models\nn = ", dim(mydat)[1], "']

  excl1 [label = 'Participants Excluded for\nDementia Diagnosis\nn = ", length(id.excl[[1]]), "']
  excl2 [label = 'Participants Excluded for\nMissing Sweden Neurofilament Light (CSF)\nn = ", length(id.excl[[2]]), "']
  excl3 [label = 'Participants Excluded for\nUnusable Neuropsychological Outcomes\nn = ", length(id.excl[[3]]), "']
  excl4 [label = 'Participants Excluded for\nMissing Covariates\nn = ", length(id.excl[[4]]), "']

  blank1 [label = '', width = 0.01, height = 0.01]
  blank2 [label = '', width = 0.01, height = 0.01]
  blank3 [label = '', width = 0.01, height = 0.01]
  blank4 [label = '', width = 0.01, height = 0.01]

  {rank = same; blank1 excl1}
  {rank = same; blank2 excl2}
  {rank = same; blank3 excl3}
  {rank = same; blank4 excl4}

  start -> blank1[dir = none];
  blank1 -> excl1[minlen = 3];
  blank1 -> blank2[dir = none];
  blank2 -> excl2[minlen = 3];
  blank2 -> blank3[dir = none];
  blank3 -> excl3[minlen = 3];
  blank3 -> blank4[dir = none];
  blank4 -> excl4[minlen = 3];
  blank4 -> final;
}
")

DiagrammeR::grViz(exclusion.diagram)
```

## Sensitivity Analysis: Excluding Outliers

```{r}
var.outlier <- c(predictors.var, outcomes.var)
var.outlier.cont <- var.outlier[sapply(mydat[, var.outlier], function(x) any(class(x) %in% c("numeric", "integer")))]
outliers <- my.outliers(mydat, var = var.outlier.cont, oth.var = c("enrolled.dx.factor"))

mydat.sens.outlier <- outliers[['data']]

outliers.df <- outliers[["outliers"]] %>% 
  purrr::map(print_outliers) %>% 
  bind_rows() %>%
  rowwise() %>%
  mutate(
    label = label(mydat[, variable]),
    variable = factor(.data$variable, levels = var.outlier.cont)
  ) %>%
  select(
    label, everything()
  )

outliers.df %>% 
  datatable(
    rownames = FALSE,
    colnames = c("Variable Label", "Variable Name", "MAP ID", "Cognitive Diagnosis", "Value", "Mean", "SD", "Outlier in SD"),
    caption = "Outliers excluded from secondary analysis") %>%
  formatSignif(5:8, 4)
``````

# Descriptive Statistics

## All Variables

```{r describe-overall, warning = FALSE, message = FALSE}
d.all <- describe(mydat[, descriptive.var], descript = "Data Summary")
Hmisc::html(d.all)
```

## Summaries and Comparisons by Cognitive Diagnosis

```{r describe-dx, results = 'asis', warning = FALSE, message = FALSE}
my.summary(my.descr.var = descriptive.var,
           my.bygrp = "enrolled.dx.factor",
           my.dat = mydat,
           my.overall = TRUE)
```

## Pairwise Comparisons by Cognitive Diagnosis

```{r pairwise-ttest}
pairwise.df <- clear_labels(mydat) %>% 
  dplyr::select(
    one_of(c("enrolled.dx.factor", descriptive.var))
  ) %>% 
  dplyr::mutate_at(
    funs(as.numeric), 
    .vars = descriptive.var
  ) %>%
  tidyr::gather(
    variable, value, -enrolled.dx.factor
  ) %>%
  na.omit() %>%
  group_by(variable) %>%
  do(tidy(pairwise.t.test(.$value, .$enrolled.dx.factor, p.adjust.method = "none"))) %>%
  select(
    variable,
    dx1 = group2,
    dx2 = group1,
    p = p.value
  ) %>%
  ungroup() %>%
  mutate(
    p.fdr = p.adjust(p, method = "fdr"),
    p.sig = ifelse(p < .05, "*", ""),
    p.fdr.sig = ifelse(p.fdr < .05, "*", "")
  )

pairwise.df$variable <- factor(pairwise.df$variable, levels = descriptive.var, ordered = TRUE)

pairwise.formatted <- formattable(
  pairwise.df[order(pairwise.df$variable), ], 
  list(p = formatP, p.fdr = formatP)
)

as.datatable(
  pairwise.formatted,
  colnames = c('Variable', 'Group 1', 'Group 2', 'p', 'p (FDR)', 'p Significant', 'p (FDR) Significant'),
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    pageLength = 15,
    buttons = c('copy', 'excel'),
    scrollX = TRUE,
    columnDefs = list(list(visible = FALSE, targets = c(6, 7)))
  ),
  caption = 'Pairwise t-Tests between Cognitive Diagnosis Groups with FDR Correction'
)
```

# Spearman Correlations

```{r spcor.all}
scatter.var.A <- Cs(
  biomarkers.nfl.plasma,
  csf.nfl
)

scatter.var.B <- setdiff(
  descriptive.var[sapply(mydat[, descriptive.var], function(x) any(class(x) %in% c("numeric", "integer")))], 
  scatter.var.A
)

scatter.var.B <- unique(c(scatter.var.A, scatter.var.B))

cor.all.df = NULL
for (j in 1:length(scatter.var.B)){
  for (i in 1:length(scatter.var.A)){
    temp.df <- mydat[, c(scatter.var.A[i], scatter.var.B[j])]
    temp.df <- sapply(temp.df, as.numeric)
    x <- Hmisc::rcorr(temp.df, type = "spearman")
    cor.all.df <- rbind(cor.all.df, c(scatter.var.A[i],
                                      scatter.var.B[j],
                                      x[["r"]][1,2],
                                      x[["P"]][1,2],
                                      x[["n"]][1,2]))
  }
}

cor.all.df <- as.data.frame(cor.all.df, stringsAsFactors = FALSE)
```

```{r spcor.nc}
cor.nc.df <- NULL
for (j in 1:length(scatter.var.B)){
  for (i in 1:length(scatter.var.A)){
    temp.df <- mydat[mydat$enrolled.dx.factor == "Normal", c(scatter.var.A[i], scatter.var.B[j])]
    temp.df <- sapply(temp.df, as.numeric)
    x <- Hmisc::rcorr(temp.df, type = "spearman")
    cor.nc.df <- rbind(cor.nc.df, c(scatter.var.A[i],
                                    scatter.var.B[j],
                                    x[["r"]][1,2],
                                    x[["P"]][1,2],
                                    x[["n"]][1,2]))
  }
}

cor.nc.df <- as.data.frame(cor.nc.df, stringsAsFactors = FALSE)
```

```{r spcor.aar}
cor.aar.df <- NULL
for (j in 1:length(scatter.var.B)){
  for (i in 1:length(scatter.var.A)){
    temp.df <- mydat[mydat$enrolled.dx.factor == "Ambiguous At Risk", c(scatter.var.A[i], scatter.var.B[j])]
    temp.df <- sapply(temp.df, as.numeric)
    x <- Hmisc::rcorr(temp.df, type = "spearman")
    cor.aar.df <- rbind(cor.aar.df, c(scatter.var.A[i],
                                      scatter.var.B[j],
                                      x[["r"]][1,2],
                                      x[["P"]][1,2],
                                      x[["n"]][1,2]))
  }
}

cor.aar.df <- as.data.frame(cor.aar.df, stringsAsFactors = FALSE)
```

```{r spcor.mci}
cor.mci.df <- NULL
for (j in 1:length(scatter.var.B)){
  for (i in 1:length(scatter.var.A)){
    temp.df <- mydat[mydat$enrolled.dx.factor == "MCI", c(scatter.var.A[i], scatter.var.B[j])]
    temp.df <- sapply(temp.df, as.numeric)
    x <- Hmisc::rcorr(temp.df, type = "spearman")
    cor.mci.df <- rbind(cor.mci.df, c(scatter.var.A[i],
                                      scatter.var.B[j],
                                      x[["r"]][1,2],
                                      x[["P"]][1,2],
                                      x[["n"]][1,2]))
  }
}

cor.mci.df <- as.data.frame(cor.mci.df, stringsAsFactors = FALSE)
```

```{r spcor.combined}
cor.df <- data.frame(
  IV = cor.all.df$V1,
  DV = cor.all.df$V2,
  all.cor = cor.all.df$V3,
  all.p = cor.all.df$V4,
  all.n = cor.all.df$V5,
  nc.cor = cor.nc.df$V3,
  nc.p = cor.nc.df$V4,
  nc.n = cor.nc.df$V5,
  aar.cor = cor.aar.df$V3,
  aar.p = cor.aar.df$V4,
  aar.n = cor.aar.df$V5,
  mci.cor = cor.mci.df$V3,
  mci.p = cor.mci.df$V4,
  mci.n = cor.mci.df$V5,
  stringsAsFactors = FALSE
)
```

```{r spcorDT, results = 'asis'}
sketch = htmltools::withTags(table(
  class = 'display',
  thead(
    tr(
      th(rowspan = 2, 'Independent Variable'),
      th(rowspan = 2, 'Dependent Variable'),
      th(colspan = 3, 'Overall'),
      th(colspan = 3, 'Normal'),
      th(colspan = 3, 'AAR'),
      th(colspan = 3, 'MCI')
    ),
    tr(
      lapply(rep(c('r', 'p', 'N'), 4), th)
    )
  )
))

datatable(
  cor.df[order(cor.df$IV), ],
  rownames = FALSE,
  container = sketch,
  extensions = c('Buttons', 'FixedColumns'),
  options = list(
    dom = 'Bfrtip',
    pageLength = dim(cor.df)[1] / length(scatter.var.A),
    buttons = c('copy', 'csv'),
    scrollX = TRUE,
    fixedColumns = list(leftColumns = 2)
  )
) %>% 
  formatStyle(
    c('all.p', 'nc.p', 'aar.p', 'mci.p'),
    color = styleInterval(0.05, c('red', 'normal'))
  ) %>%
  formatRound(c('all.cor', 'nc.cor', 'aar.cor', 'mci.cor'), 3) %>% 
  formatRound(c('all.p', 'nc.p', 'aar.p', 'mci.p'), 4)
```

## Correlation Matrix with Scatter Plots

The linked plot below shows a heatmap of the correlation values on the left and the corresponding scatterplot on the right.

**Correlation matrix**

* Colors
    + red: positive correlation
    + white: no correlation
    + blue: negative correlation
    
* Interactivity
    + hover: displays Spearman correlation between the two variables (*r*)
    + click: displays scatterplot of the two variables

**Scatterplot**

* Colors
    + blue: "Normal"
    + magenta: "Ambiguous at Risk"
    + orange: "MCI"
    
* Interactivity
    + hover: displays corresponding MAP ID
    
```{r, message = FALSE, warning = FALSE, fig.height = 4.5, fig.width = 10}
mydat.cor <- mydat[c(scatter.var.A, scatter.var.B, "enrolled.dx.factor")] %>% data.matrix()
mydat.cor <- as.data.frame(mydat.cor)
rownames(mydat.cor) <- mydat$map.id

spearman <- cor(mydat.cor, use = "pairwise.complete.obs", method = "spearman")

qtlcharts::iplotCorr(
  mydat.cor, group = mydat$enrolled.dx.factor, corr = spearman,
  chartOpts = list(cortitle = "Correlation Matrix", 
                   scattitle = "Scatter Plot",
                   scatcolors = c("blue", "magenta", "orange")
  ))
```

<!-- # Regression Analysis -->

```{r ModelPlus.fun, results = 'asis'}
ModelPlus <- function(dat, predictor, outcome, covariates, mod, pcutoff = 0.05, show = TRUE, excl = FALSE, remove = FALSE) {
    dat.subset <- dat

    dat.subset <- na.omit(dat.subset[, c(predictor, outcome, covariates)])    
    dat.subset <- droplevels(dat.subset)
    
    # remove singular variables
    singular.excl <- colnames(dat.subset)[which(sapply(dat.subset, function(x) length(unique(x))) == 1)]
    covariates <- setdiff(covariates, singular.excl)
    
    N <- dim(dat.subset)[1]

    # set "No" to reference level
    if (nlevels(dat.subset$apoe4pos.factor) > 1) {
      dat.subset$apoe4pos.factor <- relevel(dat.subset$apoe4pos.factor, ref = "No")
    }
    
    dd <<- datadist(dat.subset, adjto.cat = "first")
    options(datadist = 'dd')
    
    ### create regression formula ###
    
    predphrase <- predictor
    
    ## formula string for basic regressions
    form.string <- paste0(outcome, ' ~ ', paste0(c(covariates, predphrase), collapse= ' + '))
    
    ## formula string for interactions
    if (grepl('inter.dx', mod)) {
      form.string <- paste0(form.string, ' + ', predphrase, ' : ', 'enrolled.dx.factor')
    }
    if (grepl('inter.apoe', mod)) {
      form.string <- paste0(form.string, ' + ', predphrase, ' : ', 'apoe4pos.factor')
    }
    if (grepl('inter.amyloid', mod)) {
      form.string <- paste0(form.string, ' + ', predphrase, ' : ', 'amyloidPos.factor.base')
    }
    if (grepl('inter.tau', mod)) {
      form.string <- paste0(form.string, ' + ', predphrase, ' : ', 'csf.tau')
    }
    if (grepl('inter.HippoVol', mod)) {
      form.string <- paste0(form.string, ' + ', covariates.adj.var, ' + ', predphrase, ' : ma.hippocampus.vol')
    }
    if (grepl('inter.IntInfLatVentVol', mod)) {
      form.string <- paste0(form.string, ' + ', covariates.adj.var, ' + ', predphrase, ' : ma.inf.lat.vent.vol')
    }

    form <- as.formula(form.string)
    
    ######
    
    # run lrm model if outcome is factor, otherwise ols
    
    is.lrm <- FALSE
    
    #if (is.factor(dat.subset[, outcome]) | length(unique(dat.subset[, outcome])) < 10) {
    if (is.factor(dat.subset[, outcome])) {
      is.lrm <- TRUE
    }
      
    if (is.lrm) {
      fit <- lrm(form, data = dat.subset)
      coefs.logit <- coef(fit)
      vars.logit <- diag(vcov(fit))
      ses.logit <- sqrt(vars.logit)
      zs <- coefs.logit / ses.logit
      Z975 <- qnorm(0.975)
      lls.logit <- coefs.logit - Z975 * ses.logit
      uls.logit <- coefs.logit + Z975 * ses.logit
      pvals <- 2 * pnorm(abs(zs), lower.tail = FALSE)
      
      ## convert point estimate, confidence interval to odds scale
      coefs <- formatC(exp(coefs.logit), digits = 6)
      lls <- formatC(exp(lls.logit), digits = 4)
      uls <- formatC(exp(uls.logit), digits = 4)
      
      R2 <- NA
      adjR2 <- NA
      C <- fit$stats["C"]
      
      # cis.f <- paste0("(", round_to(lls, 3), ", ", round_to(uls, 3), ")")
      cis.f <- paste0(
        "(",
        format(lls, digits = 4, nsmall = 3), ", ",
        format(uls, digits = 4, nsmall = 3), ")"
      )

      pvals.f <- pvals
      
      rowsToKeep <- (length(unique(dat.subset[, outcome]))):length(coefs)
      
      # sumtable <- cbind(round_to(coefs, 2), cis.f, pvals.f)[rowsToKeep, ]
      sumtable <- cbind(format(coefs, digits = 4, nsmall = 2, scientific = FALSE), cis.f, pvals.f)[rowsToKeep, ]
      colnames(sumtable) <- Cs(Coef, CI, Pval)
      
      # fit.stats <- paste0('; C-index: ', round(C, 2))
      
      table.cap.1 <- paste0(
        'Predictor: ', predictor, 
        '; Outcome: ', outcome,
        '; N: ', N, 
        '; C-index: ', round_to(C, 2),
        '.')
    } else {
      
      fit <- ols(form, data = dat.subset)
      
      coefs <- coef(fit)
      CIs <- confint(fit)
      lls <- CIs[, 1]
      uls <- CIs[, 2]
      pvals <- coef(summary.lm(fit))[, "Pr(>|t|)"]
      R2 <- fit$stats["R2"]
      adjR2 <- summary.lm(fit)$adj.r.squared
      
      # cis.f <- paste0("(", round_to(lls, 3), ", ", round_to(uls, 3), ")")
      cis.f <- paste0(
        "(",
        format(lls, digits = 4, nsmall = 3), ", ",
        format(uls, digits = 4, nsmall = 3), ")"
      )
      
      pvals.f <- pvals
      
      rowsToKeep <- 2:length(coefs)
      # sumtable <- cbind(round_to(coefs, 2), cis.f, pvals.f)[rowsToKeep, ]
      sumtable <- cbind(format(coefs, digits= 4, nsmall= 2, scientific = FALSE), cis.f, pvals.f)[rowsToKeep, ]
      colnames(sumtable) <- Cs(Coef, CI, Pval)

      table.cap.1 <- paste0(
        'Predictor: ', predictor,
        '; Outcome: ', outcome,
        '; N: ', N, 
        '; R-squared: ', round_to(R2, 2),
        '; adj R-squared: ', round_to(adjR2, 4),
        '.')
    }
    
    # format output
    
    table.rownames <- names(coefs)[rowsToKeep]
    
    #    table.rownames[table.rownames == "age"] <- "Age (yrs)"
    table.rownames[table.rownames == "apoe4pos.factor=Yes"] <- "ApoE4 pos. (vs. neg.)"
    table.rownames[table.rownames == "education"] <- "Education (yrs)"
    table.rownames[table.rownames == "sex.factor=Female"] <- "Female (vs. male)"
    table.rownames[table.rownames == "enrolled.dx.factor=MCI"] <- "MCI (vs. NC)"
    table.rownames[table.rownames == "enrolled.dx.factor=Ambiguous At Risk"] <- "At Risk (vs. NC)"
    table.rownames <- gsub('enrolled.dx.factor', 'diagnosis', table.rownames)
    table.rownames <- gsub('apoe4pos.factor', 'apoe4pos', table.rownames)
    table.rownames <- gsub('amyloidPos.factor.base', 'amyloidPos', table.rownames)
    
    # table.cellTex <- 
    #   matrix(rep("", nrow(sumtable) * ncol(sumtable)), 
    #          nrow= nrow(sumtable))
    # table.cellTex[, which(colnames(sumtable) == "Pval")] <- 
    #   ifelse(as.numeric(sumtable[, "Pval"]) < pcutoff, "color{red}", "")
    
    table.cellTex <- ifelse(as.numeric(sumtable[, "Pval"]) < pcutoff, "TRUE", "FALSE")    
    table.colorPhrase <- paste0('P-values less than ', pcutoff, ' are in red.')
    
    table.cap <- paste(table.cap.1, table.colorPhrase) 
    
    if (excl) table.cap <- paste0("Excluding Outliers: ", table.cap)
    # if (remove) table.cap <- paste0("Excluding Outliers: ", table.cap) 
    
    # print output
    
    if (show) {
      sumtable.format <- sumtable %>%
        as.data.frame(., stringsAsFactors = FALSE) %>%
        formattable(list(Pval = formatP), caption = table.cap)
      print(sumtable.format)
      cat("\n\n")
    }
    
    # calculate total.p using ANOVA
    
    options(datadist = NULL)
    my.anova <- NA 
    power.out <- NULL
    
    if (!grepl('inter', mod)) { #! this can be generalized using the interaction type above
      my.anova <- do.call(anova, list(fit, predictor))
      total.p <- my.anova[predictor, "P"]
    } else if (grepl('inter.dx', mod)) { 
      my.anova <- anova(fit, enrolled.dx.factor)
      total.p <- my.anova[" All Interactions", "P"]
    } else if (grepl('inter.apoe', mod)) {
      my.anova <- anova(fit, apoe4pos.factor)
      total.p <- my.anova[" All Interactions", "P"]
    } else if (grepl('inter.amyloid', mod)){
      my.anova <- anova(fit, amyloidPos.factor.base)
      total.p <- my.anova[" All Interactions", "P"]
    }
    
    dropped.var <- ifelse(
      identical(singular.excl, character(0)),
      "",
      paste0(singular.excl, collapse = ', ')
    )
    
    if (is.lrm == TRUE) {
      list(
        fit = fit, 
        sumtable = sumtable, 
        dd = dd, 
        total.p = total.p,
        stats = c(R2 = NA, adjR2 = NA, C), 
        N = N, 
        dropped.var = dropped.var
      )
    } else {
      list(
        fit = fit, 
        sumtable = sumtable, 
        dd = dd, 
        total.p = total.p,
        stats = c(R2, adjR2 = adjR2, C = NA), 
        N = N, 
        dropped.var = dropped.var
      )
    }
}
```

```{r my.section.fun, results = 'asis'}
my.section <- function(my.pred, my.outcomes, my.covariates, my.mod, my.mod.text, dat = mydat, dat2) {
  # my.section shows results for each pred as a section in the document
  
  my.mod.sens.outlier <- paste0(my.mod, ".sens.outlier")

  #  my.show.mod <- !grepl('sens', my.mod)
  my.show.out <- !grepl('factor', my.outcomes)
  
  my.mod.all <- c(my.mod, my.mod.sens.outlier)
  
  # create list to store models and name it #
  htList <- vector("list", length(my.mod.all))
  names(htList) <- my.mod.all
  
  for(i in seq_along(my.mod.all)){
    htList[[i]] <- vector("list", length(my.outcomes))
    names(htList[[i]]) <- my.outcomes
  }
  
  for(i in seq_along(my.outcomes)){
    vname <- my.outcomes[i]  # define the current outcome of interest #
    m.covs <- my.covariates  # define model covariates #
    
    cat(paste0("\n## Outcome: ", vname, " \n"))
    
    for (j in seq_along(my.mod)){
      
      ### model level ###
      
      m  <- my.mod[j]
      m2 <- my.mod.sens.outlier[j]

      m.text <- my.mod.text[j] # j = model #
      # m.show <- my.show.out[i] # i = outcome #
      
      m.dat <- dat
      m.dat2 <- dat2

      ### subset data based on model type ###
      
      if (grepl('main.A', m)){
        m.dat <- dat
        m.dat2 <- dat2
      }
      
      if (grepl('inter.dx', m)){
        m.dat <- subset(dat, enrolled.dx.factor %in% c("Normal", "MCI"))
        m.dat2 <- subset(dat2, enrolled.dx.factor %in% c("Normal", "MCI"))
      }

      if (grepl("nc", m)){
        m.covs <- setdiff(m.covs, "enrolled.dx.factor")
        m.dat <- subset(dat, enrolled.dx.factor == "Normal")
        m.dat2 <- subset(dat2, enrolled.dx.factor == "Normal")
      }
      
      if(grepl("mci", m)){
        m.covs <- setdiff(m.covs, "enrolled.dx.factor")
        m.dat <- subset(dat, enrolled.dx.factor == "MCI")
        m.dat2 <- subset(dat2, enrolled.dx.factor == "MCI")
      }

      cat(paste0("\n### Model: ", m.text, " \n"))
      
      htList[[m]][[vname]] <- 
        tryCatch(ModelPlus(dat = m.dat, 
                           predictor = my.pred, 
                           outcome = vname, 
                           covariates = m.covs, 
                           mod = m, 
                           show = TRUE)
                 , error= function(e) e) #! add updated tryCatch code
      
      htList[[m2]][[vname]] <- 
        tryCatch(ModelPlus(dat = m.dat2,
                           predictor = my.pred,
                           outcome = vname,
                           covariates = m.covs,
                           mod = m,
                           show = FALSE)
                 , error= function(e) e)
    }
  }
  htList
}
```

```{r models, results = 'asis'}
models <- c(
  "main.B",
  "inter.dx.B",
  "nc.B",
  "mci.B"
)

models.label <- c(
  "Main Effect", 
  "Interaction: By Diagnosis", 
  "Subgroup: Normal",
  "Subgroup: MCI",
  "Interaction: By CSF NFL",
  "Interaction: By CSF NFL: Subgroup: Normal",
  "Interaction: By CSF NFL: Subgroup: MCI"
)

# models.sens.outlier <- main.sens.outlier
# models.sens.outlier.text <- paste0('Excluding Outliers: ', models.label[1])
```

```{r regression, results = 'asis', cache = TRUE}
regression.list <- vector("list", length(predictors.var))
names(regression.list) <- predictors.var

for (i in seq_along(predictors.var)) {
  pname = predictors.var[i]
  cat(paste0("\n# Analyses: ", pname, " as predictor", " \n"))
  regression.list[[pname]] <- my.section(
    my.pred = pname,
    my.outcomes = outcomes.var,
    my.covariates = covariates.var, 
    my.mod = models,
    my.mod.text = models.label,
    dat2 = mydat.sens.outlier
  )
}
```

```{r save-results}
if (is.null(update.request.date)) {
  saveRDS(
    list(regression.list, my.HTList.B), 
    file = file.path(proj.code.dir, 
                     paste0("results.regression.csf",
                            "_r", 
                            request.date,
                            "_m",
                            format(Sys.time(), '%Y%m%d'),
                            ".rds")
    )
  )
} else {
  saveRDS(
    list(regression.list, my.HTList.B), 
    file = file.path(proj.code.dir, 
                     paste0("results.regression.csf",
                            "_r", 
                            request.date,
                            "_u",
                            update.request.date,
                            "_m",
                            format(Sys.time(), '%Y%m%d'),
                            ".rds")
    )
  )
}

```

# Summary Tables of Regression Results

Each model is summarized with either an *Adjusted R^2^* value (for OLS models) or a *C-Index* value (for logistic regression models). The *Dropped Variables* column, if included, lists variables that had only one unique value after subsetting for the specified model. The variable listed was therefore removed from the model formula.

```{r create-summary-table, message = FALSE, warning = FALSE}
d = matrix(data = "delete", ncol = 12)
for (pname in names(regression.list)) {
  for(m in names(regression.list[[pname]])) {
    for(vname in names(regression.list[[pname]][[m]])) {
      tmpList <- regression.list[[pname]][[m]][[vname]]
      tmpTbl <- tail(tmpList$sumtable, 1)
      newrow <- c(
        m,
        pname,
        vname,
        tmpList[["N"]],
        tmpTbl[1],
        tail(confint(regression.list[[pname]][[m]][[vname]][["fit"]]), 1)[1],
        tail(confint(regression.list[[pname]][[m]][[vname]][["fit"]]), 1)[2],
        tmpTbl[3],
        tmpList[["stats"]][["adjR2"]],
        tmpList[["stats"]][["C"]],
        tmpList[["total.p"]],
        tmpList[["dropped.var"]]
      )
      
      d <- rbind(d, newrow)
    }
  }
}
summary.all.df <- data.frame(d[-1, ], stringsAsFactors = FALSE)

colnames(summary.all.df) <- c("Model", "Predictor", "Outcome", "N", "Estimate", "95% LCI", "95% UCI", "p-Value", "Adj R2", "C-Index", "Total p-Value", "Dropped Variables")

summary.all.df %<>%
  tidyr::replace_na(
    list(
      `Adj R2` = "", 
      `C-Index` = ""
    )
  )

summary.all.df[, c("N", "Estimate", "95% LCI", "95% UCI", "p-Value", "Adj R2", "C-Index", "Total p-Value")] <-
  lapply(
    summary.all.df[, c("N", "Estimate", "95% LCI", "95% UCI", "p-Value", "Adj R2", "C-Index", "Total p-Value")], 
    as.numeric
  )

if (is.na(summary.all.df[, "C-Index"])) {
  summary.all.df[, "C-Index"] <- NULL
}

if (summary.all.df[, "Dropped Variables"] == "") {
  summary.all.df[, "Dropped Variables"] <- NULL
}

model.order <- unique(summary.all.df$Model)

summary.all.df$Model <- factor(summary.all.df$Model, levels = model.order)
summary.all.df$Predictor <- factor(summary.all.df$Predictor, levels = unique(summary.all.df$Predictor))
summary.all.df$Outcome <- factor(summary.all.df$Outcome, levels = unique(summary.all.df$Outcome))

summary.formatted <- formattable(
  summary.all.df, 
  list(
    `p-Value` = formatP,
    `Total p-Value` = formatP
  )
)
```

## Main Analyses

```{r summary-table-main, warning = FALSE, message = FALSE}
as.datatable(
  summary.formatted[!grepl("sens", summary.formatted$Model), ],
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    pageLength = length(outcomes.var),
    buttons = c('copy', 'excel'),
    scrollX = TRUE,
    scrollY = TRUE
  ),
  caption = 'Summary Table 1: Main Analyses'
) %>% 
  formatRound(c("Estimate", "95% LCI", "95% UCI", "Adj R2"), 4)
```

## Sensitivity Analyses: Excluding Outliers

```{r summary-table-sens, warning = FALSE, message = FALSE}
as.datatable(
  summary.formatted[grepl("sens", summary.formatted$Model), ],
  extensions = 'Buttons',
  options = list(
    dom = 'Bfrtip',
    pageLength = length(outcomes.var),
    buttons = c('copy', 'excel'),
    scrollX = TRUE,
    scrollY = TRUE
  ),
  caption = 'Summary Table 2: Sensitivity Analyses: Excluding Outliers'
) %>% 
  formatRound(c("Estimate", "95% LCI", "95% UCI", "Adj R2"), 4)
```

<!-- # Publication Quality Figures -->

```{r publication-plots, include = FALSE, message = FALSE, warning = FALSE}
publication.plot <- function(data = dat, x, y, group = "enrolled.dx.factor", x.breaks, x.limits, y.breaks, y.limits, x.label, y.label, legend.title, group.labels, legend.location, filename) {
  library(extrafont)
  loadfonts(device = "postscript")

  p <- data %>%
    select(x, y, group) %>%
    filter(enrolled.dx.factor != "Ambiguous At Risk") %>%
    na.omit() %>%
    ggplot(
      aes_string(x = x, y = y, color = group, shape = group, linetype = group),
      environment = environment()
    ) +
    geom_point() +
    geom_smooth(method = "lm", fullrange = TRUE) + 
    theme_linedraw() + 
    scale_x_continuous(
      breaks = x.breaks, limits = x.limits
    ) +
    scale_y_continuous(
      breaks = y.breaks, limits = y.limits
    ) +
    scale_color_grey(
      start = 0, end = .6,
      name = legend.title,
      labels = group.labels
    ) + 
    scale_shape_manual(
      name = legend.title,
      labels = group.labels,
      values = c(19, 17)
    ) + 
    scale_linetype_manual(
      name = legend.title,
      labels = group.labels,
      values = c("solid", "longdash")
    )+
    labs(
      x = x.label,
      y = y.label
    ) +
    theme(
      text = element_text(family = "Arial"),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(), 
      legend.position = legend.location,
      legend.background = element_rect(fill = alpha("white", 0)),
      aspect.ratio = 1
    )
  
  ggsave(filename, plot = p, device = cairo_ps)
}

dat <- na.omit(mydat[mydat$enrolled.dx.factor != "Ambiguous At Risk", c("np.memory.composite", "csf.nfl", "enrolled.dx.factor")])

publication.plot(
  data = dat,
  x = "csf.nfl", 
  y = "np.memory.composite", 
  group = "enrolled.dx.factor", 
  x.breaks = c(0, 1000, 2000, 3000, max(dat$csf.nfl)),
  x.limits = range(0, max(dat$csf.nfl)), 
  y.breaks = c(min(dat$np.memory.composite), -2, -1, 0, 1, max(dat$np.memory.composite)), 
  y.limits = range(min(dat$np.memory.composite), max(dat$np.memory.composite)),
  x.label = "CSF Neurofilament Light, pg/mL",
  y.label = "Memory Composite Score, Total (z-score)",
  legend.title = "Cognitive Diagnosis",
  group.labels = c("NC", "MCI"),
  legend.location = "bottom",
  filename = file.path(proj.dir, "manuscript", "figures", 
                       "x_csf.nfl_y_np.memory.composite_g_enrolled.dx.factor_l_bottom_20180515.eps")
)

publication.plot(
  data = dat,
  x = "csf.nfl", 
  y = "np.memory.composite", 
  group = "enrolled.dx.factor", 
  x.breaks = c(0, 1000, 2000, 3000, max(dat$csf.nfl)),
  x.limits = range(0, max(dat$csf.nfl)), 
  y.breaks = c(min(dat$np.memory.composite), -2, -1, 0, 1, max(dat$np.memory.composite)), 
  y.limits = range(min(dat$np.memory.composite), max(dat$np.memory.composite)),
  x.label = "CSF Neurofilament Light, pg/mL",
  y.label = "Memory Composite Score, Total (z-score)",
  legend.title = "Cognitive Diagnosis",
  group.labels = c("NC", "MCI"),
  legend.location = "right",
  filename = file.path(proj.dir, "manuscript", "figures", 
                       "x_csf.nfl_y_np.memory.composite_g_enrolled.dx.factor_l_right_20180515.eps")
)
```
